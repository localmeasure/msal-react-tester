{"version":3,"file":"index.js","sources":["../src/MsalReactTesterPlugin.ts","../src/testerConstants.ts","../src/MsalReactTester.ts"],"sourcesContent":["import {waitFor} from '@testing-library/react'\nexport interface ITestRunner {\n    spyOn: Function,\n    expect: Function,\n    resetAllMocks: Function,\n    waitingFor: Function\n}\n\nexport class MsalReactTesterPlugin {\n\n    public static TestRunner: ITestRunner = {\n        spyOn: typeof jest !== 'undefined' ? jest.spyOn : () => { },\n        expect: typeof jest !== 'undefined' ?  expect : () => { },\n        resetAllMocks: typeof jest !== 'undefined' ? jest.resetAllMocks : () => { },\n        waitingFor: typeof jest !== 'undefined' ? waitFor : () => { }\n    };\n\n\n    public static init(testRunner: ITestRunner = null) {\n        if (testRunner) {\n            MsalReactTesterPlugin.TestRunner = testRunner;\n        }\n    }\n}\n\n","import { AccountInfo, AuthenticationResult, AuthError } from '@azure/msal-browser';\n\nexport const TEST_ACCESS_TOKEN =\n  'eyJhbGciOiJIUzI1NiJ9.eyJzY3AiOiJVc2VyLlJlYWQiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9jb250b3NvIiwiYXBwX2Rpc3BsYXluYW1lIjoiYXBwbGljYXRpb24tbmFtZSIsInRpZCI6InRlbmFudC1pZCIsInRlbmFudF9yZWdpb25fc2NvcGUiOiJYWCIsImF1ZCI6IjAwMDAwMDAzLTAwMDAtMDAwMC1jMDAwLTAwMDAwMDAwMDAwMCIsInVuaXF1ZV9uYW1lIjoiam9obi5kb2VAY29udG9zby5jb20iLCJuYmYiOiIxNjU2NTk5NjI2IiwiYXBwaWQiOiJhcHAtaWQiLCJuYW1lIjoiSm9obiBEb2UiLCJleHAiOiIxNjU2NjA0NzY3IiwiaWF0IjoiMTY1NjU5OTYyNiIsImVtYWlsIjoiam9obi5kb2VAY29udG9zby5jb20ifQ.ftOvEUhqEFKWxIcxcYsgstgldO-31hIVwEhQ0hwwqWg';\n\n//\n// Token parsed is equal to :\n//\n/**\n\n {\n  \"alg\": \"HS256\"\n }.{\n  \"aud\": \"00000003-0000-0000-c000-000000000000\",\n  \"iss\": \"https://sts.windows.net/contoso\",\n  \"nbf\": \"1656599626\",\n  \"iat\": \"1656599626\",\n  \"exp\": \"1656604767\",\n  \"app_displayname\": \"application-name\",\n  \"tid\": \"tenant-id\",\n  \"tenant_region_scope\": \"XX\",\n  \"unique_name\": \"john.doe@contoso.com\",\n  \"appid\": \"app-id\",\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@contoso.com\",\n  \"scp\": \"User.Read\"\n}.[Signature]\n\n \n */\n\nexport const defaultTestAccountInfo: AccountInfo = {\n  homeAccountId: \"home-account-id\",\n  localAccountId: \"local-account-id\",\n  environment: 'login.windows.net',\n  tenantId: \"tenant-id\",\n  username: 'john.doe@contoso.com',\n  name: 'John Doe',\n};\n\nexport const defaultTestAuthenticationResult: AuthenticationResult = {\n  authority: 'https://login.microsoftonline.com',\n  uniqueId: 'unique-id',\n  tenantId: 'tenant-id',\n  scopes: ['openid', 'profile'],\n  idToken: 'test-id-token',\n  idTokenClaims: {},\n  accessToken: TEST_ACCESS_TOKEN,\n  fromCache: false,\n  correlationId: 'test-correlation-id',\n  expiresOn: new Date(Date.now() + 3600000),\n  account: defaultTestAccountInfo,\n  tokenType: 'Bearer',\n};\n\nexport const defaultTestAuthError: AuthError = {\n  errorCode: 'test-error-code',\n  errorMessage: 'test-error-message',\n  subError: '',\n  correlationId: '',\n  setCorrelationId: function (correlationId: string): void {\n    this.correlationId = correlationId;\n  },\n  name: 'test-error',\n  message: 'test-message',\n};\n","import { IPublicClientApplication, Logger, LogLevel, AccountInfo, EventCallbackFunction, AuthenticationResult, EventMessage, EventType, InteractionType, AuthError } from '@azure/msal-browser';\nimport { MsalReactTesterPlugin, ITestRunner } from './MsalReactTesterPlugin';\nimport { defaultTestAccountInfo, defaultTestAuthenticationResult, defaultTestAuthError, } from './testerConstants';\n/**\n * msal-react tester. Useful to tests your components requiring to be logged in, using msal-react\n * @example\n *   \n  let msalTester: MsalReactTester;\n  beforeEach(() => {\n    // new instance of msal tester for each test\n    msalTester = new MsalReactTester();\n    // spy all required msal things\n    msalTester.spyMsal();\n  });\n\n  afterEach(() => {\n    msalTester.resetSpyMsal();\n  });\n\n  test('Home page render correctly when user is not logged', async () => {\n    msalTester.isNotLogged();\n    render(\n      <MsalProvider instance={msalTester.client}>\n        <MemoryRouter>\n          <Layout>\n            <HomePage />\n          </Layout>\n        </MemoryRouter>\n      </MsalProvider>,\n    );\n    await msalTester.waitForRedirect();\n    expect(screen.getByText(/Please sign-in/)).toBeInTheDocument();\n  });\n\n */\nclass MsalReactTester {\n\n  private _eventCallbacks: EventCallbackFunction[] = [];\n  private _handleRedirectSpy: any;\n  private _loginRedirectSpy: any;\n  private _loginPopupSpy: any;\n  private _logoutRedirectSpy: any;\n  private _logoutPopupSpy: any;\n  private _testAccountInfo: AccountInfo;\n  private _testAuthenticationResult: AuthenticationResult;\n  private _testRunner: ITestRunner\n\n  client: IPublicClientApplication;\n  accounts: AccountInfo[] = [];\n  activeAccount: AccountInfo | null = null;\n  error: AuthError;\n\n  /**\n   * Create a new mock IPublicClientApplication instance\n   * @param testAccountInfo test account you want to use. A default is created if null\n   * @param testAuthenticationResult test authentication result you want to use . A default is created is null\n   */\n  constructor(public interationType: 'Redirect' | 'Popup' = 'Redirect', testAccountInfo = defaultTestAccountInfo,\n    testAuthenticationResult = defaultTestAuthenticationResult,\n    testAuthError = defaultTestAuthError) {\n\n    this._testRunner = MsalReactTesterPlugin.TestRunner;\n\n    \n    this._testAccountInfo = testAccountInfo;\n    this._testAuthenticationResult = testAuthenticationResult;\n\n    this.error = testAuthError;\n    this.client = MsalReactTester.GetNewClient(testAccountInfo, testAuthenticationResult)\n  }\n\n  /**\n   * Initialize the IPublicClientApplication with an active account.\n   */\n  isLogged() {\n    this.accounts = [this._testAccountInfo];\n    this.activeAccount = this._testAccountInfo;\n  }\n\n  /**\n   * Initialize the IPublicClientApplication with no active account\n   */\n  isNotLogged() {\n\n    this.accounts = [];\n    this.activeAccount = null;\n  }\n\n  /**\n   * Reset all spy / mocks. Should be used in `afterEach` call:\n   * \n   *  @example\n   *  afterEach(() => {\n   *   msalTester.resetSpyMsal();\n   * });\n   */\n  resetSpyMsal() {\n    this._testRunner.resetAllMocks();\n    this.accounts = [];\n    this.activeAccount = null;\n    this._eventCallbacks = [];\n  }\n\n  /**\n   * Wait for login process to be done\n   */\n  async waitForLogin() {\n    await this._testRunner.waitingFor(() => this._testRunner.expect(this._handleRedirectSpy).toHaveBeenCalledTimes(1));\n    if (this.interationType === 'Redirect')\n      await this._testRunner.waitingFor(() => this._testRunner.expect(this._loginRedirectSpy).toHaveBeenCalledTimes(1));\n    else\n      await this._testRunner.waitingFor(() => this._testRunner.expect(this._loginPopupSpy).toHaveBeenCalledTimes(1));\n  }\n\n  /**\n   * Wait for redirect handled by MSAL to be done\n   */\n  async waitForRedirect() {\n    await this._testRunner.waitingFor(() => this._testRunner.expect(this._handleRedirectSpy).toHaveBeenCalledTimes(1));\n  }\n\n  /**\n   * Wait for logout process to be done\n   */\n  async waitForLogout() {\n    await this._testRunner.waitingFor(() => this._testRunner.expect(this._handleRedirectSpy).toHaveBeenCalledTimes(1));\n\n    if (this.interationType === 'Redirect')\n      await this._testRunner.waitingFor(() => this._testRunner.expect(this._logoutRedirectSpy).toHaveBeenCalledTimes(1));\n    else\n      await this._testRunner.waitingFor(() => this._testRunner.expect(this._logoutPopupSpy).toHaveBeenCalledTimes(1));\n  }\n\n  /**\n  * Spy and Mocks required MSAL things. Should be used in `beforeEach` call:\n  * \n  *  @example\n  *    let msalTester: MsalReactTester;\n       beforeEach(() => {\n         // new instance of msal tester for each test\n         msalTester = new MsalReactTester();\n         // spy all required msal things\n         msalTester.spyMsal();\n       });\n  * });\n  */\n  spyMsal() {\n    let eventId = 0;\n    this._testRunner.spyOn(this.client, 'addEventCallback').mockImplementation((callbackFn: any) => {\n      this._eventCallbacks.push(callbackFn);\n      eventId += 1;\n      return eventId.toString();\n    });\n\n    // send a message to say \"hey we made redirect start then end\"\n    this._handleRedirectSpy = this._testRunner.spyOn(this.client, 'handleRedirectPromise').mockImplementation(() => {\n\n      const eventStart: EventMessage = {\n        eventType: EventType.HANDLE_REDIRECT_START,\n        interactionType: InteractionType.Redirect,\n        payload: null,\n        error: null,\n        timestamp: 10000,\n      };\n\n      \n      this._eventCallbacks.forEach((callback) => {\n         callback(eventStart);\n      });\n\n\n      const eventEnd: EventMessage = {\n        eventType: EventType.HANDLE_REDIRECT_END,\n        interactionType: InteractionType.Redirect,\n        payload: null,\n        error: null,\n        timestamp: 10000,\n      };\n\n      this._eventCallbacks.forEach(async (callback) => {\n        callback(eventEnd)\n      });\n\n      return Promise.resolve(null);\n    });\n\n    this._loginRedirectSpy = this._testRunner.spyOn(this.client, 'loginRedirect').mockImplementation(async (request) => {\n\n      this.accounts = [this._testAccountInfo];\n      this.activeAccount = this._testAccountInfo;\n\n      const eventMessage: EventMessage = {\n        eventType: EventType.LOGIN_SUCCESS,\n        interactionType: InteractionType.Redirect,\n        payload: this._testAuthenticationResult,\n        error: null,\n        timestamp: 10000,\n      };\n\n      this._eventCallbacks.forEach((callback) => {\n        callback(eventMessage);\n      });\n\n      return Promise.resolve();\n    });\n\n    this._loginPopupSpy = this._testRunner.spyOn(this.client, \"loginPopup\").mockImplementation(async (request) => {\n\n      this.accounts = [this._testAccountInfo];\n      this.activeAccount = this._testAccountInfo;\n\n      const eventMessage: EventMessage = {\n        eventType: EventType.LOGIN_SUCCESS,\n        interactionType: InteractionType.Popup,\n        payload: this._testAuthenticationResult,\n        error: null,\n        timestamp: 10000\n      };\n\n      this._eventCallbacks.forEach((callback) => {\n        callback(eventMessage);\n      });\n\n      return Promise.resolve(this._testAuthenticationResult);\n    });\n\n    this._logoutRedirectSpy = this._testRunner.spyOn(this.client, 'logoutRedirect').mockImplementation(async (request) => {\n      this.accounts = [];\n      this.activeAccount = null;\n\n      const eventMessage: EventMessage = {\n        eventType: EventType.LOGOUT_SUCCESS,\n        interactionType: InteractionType.Redirect,\n        payload: this._testAuthenticationResult,\n        error: null,\n        timestamp: 10000,\n      };\n\n      this._eventCallbacks.forEach((callback) => {\n        callback(eventMessage);\n      });\n\n      return Promise.resolve();\n\n    });\n\n    this._logoutPopupSpy = this._testRunner.spyOn(this.client, 'logoutPopup').mockImplementation(async (request) => {\n      this.accounts = [];\n      this.activeAccount = null;\n\n      const eventMessage: EventMessage = {\n        eventType: EventType.LOGOUT_SUCCESS,\n        interactionType: InteractionType.Popup,\n        payload: this._testAuthenticationResult,\n        error: null,\n        timestamp: 10000,\n      };\n\n      this._eventCallbacks.forEach((callback) => {\n        callback(eventMessage);\n      });\n\n      return Promise.resolve();\n\n    });\n\n    this._testRunner.spyOn(this.client, 'getAllAccounts').mockImplementation(() => this.accounts);\n    this._testRunner.spyOn(this.client, 'getActiveAccount').mockImplementation(() => this.activeAccount);\n    this._testRunner.spyOn(this.client, 'setActiveAccount').mockImplementation((account) => (this.activeAccount = account));\n  }\n\n\n  generateFailure() { \n\n    if (this.interationType === 'Redirect') {\n\n      if (this._loginRedirectSpy)\n        this._loginRedirectSpy.mockClear();\n\n      this._loginRedirectSpy = this._testRunner.spyOn(this.client, 'loginRedirect').mockImplementation(async (request) => {\n\n        const eventMessage: EventMessage = {\n          eventType: EventType.LOGIN_FAILURE,\n          interactionType: InteractionType.Redirect,\n          payload: null,\n          error: this.error,\n          timestamp: 10000,\n        };\n\n        this._eventCallbacks.forEach((callback) => {\n          callback(eventMessage);\n        });\n\n        return Promise.resolve();\n      });\n    }\n    else {\n\n      if (this._loginPopupSpy)\n        this._loginPopupSpy.mockClear();\n\n      this._loginPopupSpy = this._testRunner.spyOn(this.client, \"loginPopup\").mockImplementation(async () => {\n        const eventMessage: EventMessage = {\n          eventType: EventType.LOGIN_FAILURE,\n          interactionType: InteractionType.Popup,\n          payload: null,\n          error: this.error,\n          timestamp: 10000\n        };\n\n        this._eventCallbacks.forEach((callback) => {\n          callback(eventMessage);\n        });\n\n        return Promise.resolve(null);\n      });\n    }\n  }\n\n\n  static GetNewClient = (testAccountInfo: AccountInfo, testAuthenticationResult: AuthenticationResult): IPublicClientApplication => {\n    let logger = new Logger({\n      loggerCallback: (_level: LogLevel, _message: string, _containsPii: boolean) => { },\n      piiLoggingEnabled: false,\n      logLevel: LogLevel.Error,\n      correlationId: 'mock_test',\n    });\n\n    return {\n      initialize: () => Promise.resolve(),\n      acquireTokenPopup: () => Promise.resolve(testAuthenticationResult),\n      acquireTokenRedirect: () => Promise.resolve(),\n      acquireTokenSilent: () => Promise.resolve(testAuthenticationResult),\n      acquireTokenByCode: () => Promise.resolve(testAuthenticationResult),\n      getAllAccounts: () => [testAccountInfo],\n      getAccountByHomeId: () => testAccountInfo,\n      getAccountByUsername: () => testAccountInfo,\n      getAccountByLocalId: () => testAccountInfo,\n      handleRedirectPromise: () => Promise.resolve(testAuthenticationResult),\n      loginPopup: () => Promise.resolve(testAuthenticationResult),\n      loginRedirect: () => Promise.resolve(),\n      logout: () => Promise.resolve(),\n      logoutRedirect: () => Promise.resolve(),\n      logoutPopup: () => Promise.resolve(),\n      ssoSilent: () => Promise.resolve(testAuthenticationResult),\n      addEventCallback: () => null,\n      removeEventCallback: () => { return },\n      addPerformanceCallback: () => '',\n      removePerformanceCallback: () => false,\n      enableAccountStorageEvents: () => { return },\n      disableAccountStorageEvents: () => { return },\n      getTokenCache: () => null,\n      setLogger: () => { return },\n      setActiveAccount: () => { return },\n      getActiveAccount: () => testAccountInfo,\n      initializeWrapperLibrary: () => { return },\n      setNavigationClient: () => { return },\n      getLogger: () => logger,\n      getConfiguration: () => null,\n    };\n  };\n\n\n}\n\n\nexport default MsalReactTester;"],"names":["waitFor","EventType","InteractionType","Logger","LogLevel"],"mappings":"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"}